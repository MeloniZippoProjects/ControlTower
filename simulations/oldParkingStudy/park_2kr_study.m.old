rhos = ['rho0.2'; 'rho0.7'];
distributions = [string('exponential'); string('normal'); string('deterministic')];
scenarios = [string('l15p60'); string('l15p30'); string('l5p60'); string('l5p30');];
combination_matrix = [1 1; 1 -1; -1 1; -1 -1];
vector = 'parkingLot_parkingOccupancy';

for rhoIdx = 1 : size(rhos,1)
    rho = rhos(rhoIdx,:);
    cd(rho);
    rho_d = str2double(rho( (length(rho) - 2) : length(rho)));
    for distIdx = 1 : length(distributions)
       dist = distributions(distIdx).char; 
       cd(dist);
       
       measures = [];
       for scenIdx = 1 : length(scenarios)
           scenario = scenarios(scenIdx).char;
           samples = loadLengthSamples(vector, scenario);
           
           
           q = zeros(1,samples.size);
           for rep = 1 : samples.size
              sample = samples.(['v' string(rep).char]);
              mergedSample = mergeSortLengthSample(sample);
              
              q(1,rep) = computeWeightedQuantile(mergedSample,0.95);
           end
           
           measures = [measures; q];
       end
       
       graph_name = [rho ' ' dist];
       
       [qs, SSx, SSE, fx, CI, std_devs] = factorial2kr(combination_matrix, measures, 0.05, graph_name);
       
       cd ..
    end
    cd ..
end